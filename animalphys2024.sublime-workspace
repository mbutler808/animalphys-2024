{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"con",
				"contrees"
			]
		]
	},
	"buffers":
	[
		{
			"file": "schedule.qmd",
			"settings":
			{
				"buffer_size": 6160,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					5,
					"left_delete",
					null,
					"BQAAAPgCAAAAAAAA+AIAAAAAAAABAAAAePcCAAAAAAAA9wIAAAAAAAABAAAAZfYCAAAAAAAA9gIAAAAAAAABAAAAZPUCAAAAAAAA9QIAAAAAAAABAAAAbvQCAAAAAAAA9AIAAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkCAAAAAAAA+QIAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "Lab1"
					},
					"BAAAAPQCAAAAAAAA9QIAAAAAAAAAAAAA9QIAAAAAAAD2AgAAAAAAAAAAAAD2AgAAAAAAAPcCAAAAAAAAAAAAAPcCAAAAAAAA+AIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQCAAAAAAAA9AIAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					5,
					"left_delete",
					null,
					"BQAAABwFAAAAAAAAHAUAAAAAAAABAAAAeBsFAAAAAAAAGwUAAAAAAAABAAAAZRoFAAAAAAAAGgUAAAAAAAABAAAAZBkFAAAAAAAAGQUAAAAAAAABAAAAbhgFAAAAAAAAGAUAAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0FAAAAAAAAHQUAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "Lab2"
					},
					"BAAAABgFAAAAAAAAGQUAAAAAAAAAAAAAGQUAAAAAAAAaBQAAAAAAAAAAAAAaBQAAAAAAABsFAAAAAAAAAAAAABsFAAAAAAAAHAUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgFAAAAAAAAGAUAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABwFAAAAAAAAHQUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwFAAAAAAAAHAUAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAABwFAAAAAAAAHAUAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0FAAAAAAAAHQUAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"paste",
					null,
					"AQAAAAADAAAAAAAAKwMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAADAAAAAAAAAAMAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACsDAAAAAAAALAMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsDAAAAAAAAKwMAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"paste",
					{
						"event":
						{
							"modifier_keys":
							{
							},
							"text_point": 804,
							"x": 1131.125,
							"y": 431.97265625
						}
					},
					"AgAAAAwDAAAAAAAAKAMAAAAAAAAAAAAAKAMAAAAAAAAoAwAAAAAAABwAAABodHRwczovL3lvdXR1LmJlL19ORE5hXzNCb244",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwDAAAAAAAAKAMAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAChFwAALS0tCnRpdGxlOiAiU2NoZWR1bGUiCmRlc2NyaXB0aW9uOiB8CiBTY2hlZHVsZSBhbmQgY291cnNlIG1hdGVyaWFscyBmb3IgQW5pbWFsIFBoeXNpb2xvZ3kgKFpvb2wgNDMwIEZhbGwgMjAyNCkuCnRibC1jb2x3aWR0aHM6IFs5LDMsIDIwLCAyMCwzMF0KZm9ybWF0OiAKICBodG1sOiBkZWZhdWx0IAogIHBkZjogZGVmYXVsdAogIGRvY3g6IGRlZmF1bHQKLS0tCmBgYHtyfQojfCBlY2hvOiBmYWxzZQpgYGAKCiMjIEFzc2lnbm1lbnQgU2NoZWR1bGUgX1NVQkpFQ1QgVE8gQ0hBTkdFXwoKCjo6OiBjb2x1bW4tcGFnZQp8ICAgfCAgIHwgQ2xhc3MgVG9waWMgfCBBc3NpZ25tZW50IER1ZSAgfCBMYWIgfCAKfC0tLS18LS0tLXwtLS0tfC0tLS18LS0tLXwKfFdlZWsgMXx8fHx8CnwgOC8yNyB8IFQgfCBJbnRybyB0byBDb3Vyc2UvTWVnYWxvZG9uIERpc2N1c3Npb24gXFtbaHRtbF0ocG9zdHMvMjAyNC0wOC0yNy1tZWdhbG9kb24tbW9kZWwvaW5kZXgucW1kKVxdIFxbW3BhcGVyXShodHRwczovL3d3dy5uYXR1cmUuY29tL2FydGljbGVzL3M0MTU4Ni0wMjMtMDYzODEtMSlcXSBcW1tHb29nbGUgRHJpdmUgY29weV0oaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMU04eWdpcFpFZDlPVWRsZDQ1QzRCR2dmSncyS1dVS1lrKVxdIHwgKFJlYWRpbmcgQXNzZXNzbWVudCkgIHwgTGFiMTogUEMxLUctSFIvRGF0YSBhbmFseXNpcyBcW1tvdmVydmlld10obGFicy9MYWIxLWhlYXJ0LXJhdGUtYW5kLWRhdGEtYW5hbHlzaXMvTGFiMS5xbWQpXF0gXFtbcG9kY2FzdF0oaHR0cHM6Ly95b3V0dS5iZS9wdWpyRzZ6aFRKRSlcXSBcW1tsYWIgbWFudWFsXShsYWJzL0xhYjEtaGVhcnQtcmF0ZS1hbmQtZGF0YS1hbmFseXNpcy9MYWIxLWRhdGEtYXF1aXN0aW9uLWZpbmdlci1wdWxzZS5wZGYpXF0gXFtbcHJvdG9jb2xdKGxhYnMvUHJvdG9jb2xzL3AxLWludHJvLWZpbmdlci1wdWxzZS5wZGYpXF0gfCAgIAp8ICAgfCBUaCB8IExpYnJhcnkgRGF5IC0gTWVldCBhdCBIYW1pbHRvbiBcW1todG1sXShwb3N0cy8yMDI0LTA4LTI5LUxpYnJhcnktZGF5L2luZGV4LnFtZClcXXwgICB8ICAgfCAgIAp8V2VlayAyfHx8fHwKfCA5LzMgIHwgVCB8IE1ldGFib2xpc20gXFtbaHRtbF1cXSBcW1tyZWFkaW5nIGFzc2lnbm1lbnQgYW5kIHF1ZXN0aW9uc10oZGlzY3Vzc2lvbnMvRGlzY3Vzc2lvbl9XZWVrXzIucGRmKVxdIFxbW0hXQSByZWFkaW5nc10oaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMU9OR2RUUGRlUXoybGdHZ0FpV3laX3lHUm1tY05Td29WKVxdIHwgICB8IExhYjI6IFBDMi1HLUhvbm9sdWx1IFpvbyBcW1tsYWIgbWFudWFsXShsYWJzL0xhYjItem9vL0xhYjIucW1kKVxdIHwgICAKfCB8IFRoIHwgU2l6ZSBhbmQgU2NhbGluZyBcW1twb2RjYXN0XShodHRwczovL3lvdXR1LmJlL19ORE5hXzNCb244KVxdfCAgIHwgIHwgICAKfCAgIHwgRiB8ICB8IEJhY2tncm91bmQgRGVzaWduIDEgXFtbaHRtbF0ocHJvamVjdHMvMC5CYWNrZ3JvdW5kQnVsbGV0UG9pbnRzLnFtZClcXSB8ICAgfCAgIAp8V2VlayAzfHx8fHwKfCA5LzEwIHwgVCB8IFRlbXBlcmF0dXJlIFxbW2h0bWxdXF0gXFtbZGlzY3Vzc2lvbl0oZGlzY3Vzc2lvbnMvRGlzY3Vzc2lvbl9XZWVrXzNfdGVtcGVyYXR1cmUucGRmKVxdIHwgIFBTMTogTWV0YWJvbGlzbSBcW1twZGZdKGhvbWV3b3JrL0hXMW1ldGFib2xpc20ucGRmKVxdIHwgTGFiMzpQQzMtSVdTLVBlcmlwaGVyYWwgQ2lyYy9EaXZlIFJlc3AgXFtbb3ZlcnZpZXddXF0gIHwgICAKfCAgIHwgVGggfCBJdGVyYXRpdmUgTWV0aG9kL0hldGVyb3RoZXJteSAgfCAgfCAgIHwgICAKfFdlZWsgNHx8fHx8CnwgOS8xNyAgfCBUIHwgIENhcmRpYWMgRnVuY3Rpb24gXFtbaHRtbF1cXSAgfCBQUzI6IFRlbXBlcmF0dXJlIFxbW3BkZl0oaG9tZXdvcmsvSFcyaGVhdF90ZW1wLnBkZilcXSAgIHwgIExhYiBQcmFjdGljYWwgLyBMYWI0OiBQQzMtRy1FQ0cvQ2FyZGlhYyBGdW5jdGlvbiBcW1tvdmVydmlld11cXSB8IAp8IHwgVGggfCBEZXNpZ24gMSBjaGF0IHwgIHwgIHwgCnwgICB8IEYgfCAgfCB8ICAgfCAgIAp8V2VlayA1fHx8fHwKfCA5LzIzICB8IE0gfCAgIHwgRGVzaWduIDEgRHVlIFxbW2Fzc2lnbm1lbnRdKHByb2plY3RzL2Rlc2lnbjEucW1kKVxdIFxbW3BkZl0ocHJvamVjdHMvMS5NZXRhYm9saXNtVGVtcERlc2lnbjEucGRmKVxdIFxbW3R1cm4gaW5dKGh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS91LzAvZm9sZGVycy8xWkR2TlRDTmVFMk9LZzZXX2Zxdmo2QlFtbzNHVGNkT28pXF0gIHwgCnwgOS8yNCAgfCBUIHwgU3VzdGFpbmVkIE1ldGFib2xpYyBTY29wZSBQYXBlciBcW1tkaXNjdXNzaW9uXShkaXNjdXNzaW9ucy9EaXNjdXNzaW9uLVdlZWs0LW1ldGFib2xpYy1jZWlsaW5nLnBkZilcXSBcW1tIYW1tb25kIGFuZCBEaWFtb25kIDE5OTddKGh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS91LzEvZm9sZGVycy8xcHNQVklNSUpWVXV5U3hwOU1IU1F4eEFobHZ5LU85a0spXF0sICBcW1tvcHRpb25hbDogUGV0ZXJzb24gZXQgYWwuIDE5OTBdKGh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS91LzEvZm9sZGVycy8xcHNQVklNSUpWVXV5U3hwOU1IU1F4eEFobHZ5LU85a0spXF0gfCAgfCBEZXNpZ24gQ3JpdGlxdWUgU2Vzc2lvbi9QZWVyIENyaXRpcXVlIDEgXFtbdHVybiBpbl1cXSB8ICAgCnwgfCBUaCB8IEZlZWRpbmcgIFxbW2h0bWxdXF0gXFtbZGlzY3Vzc2lvbl0oZGlzY3Vzc2lvbnMvRGlzY3Vzc2lvbi1XZWVrNS1mZWVkaW5nLWRpZ2VzdGlvbi5wZGYpXF18ICB8IHwgICAKfFdlZWsgNnx8fHx8CnwgMTAvMSAgfCBUIHwgRGlnZXN0aW9uICBcW1todG1sXVxdIFxbW2Rpc2N1c3Npb25dKGRpc2N1c3Npb25zL0Rpc2N1c3Npb24tV2VlazUtZmVlZGluZy1kaWdlc3Rpb24ucGRmKVxdfCBEZXNpZ24gMSBSZXdyaXRlIFxbW0R1ZSBtaWRuaWdodF0oaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWxSaDFadUc0cTQ1M09vMHh4U1pXRGdZV3h1RDZvbzllP3VzcD1zaGFyaW5nKVxdIHwgCnwgfCBUaCB8IFNwZWNpYWxpemVkIERpZ2VzdGl2ZSBTeXN0ZW1zL01heCBTaXplIEhlcmJpdm9yZXMgUGFwZXIgQ2xhdXMgMjAwMyAgfCAgIHwgIExhYjU6IFBDMS1JV1MtVG9hZCBIZWFydCBcW1tvdmVydmlld11cXSAgfCAgICAgCnxXZWVrIDd8fHx8fAp8IDEwLzggfCBUIHwgTWF4IFNpemUgSGVyYml2b3JlcyBQYXBlciBDbGF1cyAyMDAzIHwgICB8ICBMYWI2OiBQQzItRy1Mb2JzdGVyIEhlYXJ0IFxbW292ZXJ2aWV3XVxdIHwgICAKfCAgIHwgVGggfCBOZXVyb25zIFxbW2h0bWxdXF0gXFtbZGlzY3Vzc2lvbl0oZGlzY3Vzc2lvbnMvRGlzY3Vzc2lvbi1XZWVrNy1uZXVyb25zLXNpZ25hbC1wcm9wYWdhdGlvbi5wZGYpXF0gfCAgIHwgICB8ICAgCnxXZWVrIDh8fHx8fAp8IDEwLzE1ICB8IFQgfCBTeW5hcHNlcy9TZW5zb3J5IFJlY2VwdG9ycyAgfCBQUzM6IEZlZWRpbmcgJiBEaWdlc3Rpb24gXFtbcGRmXVxdIHwgTGFiIDc6UEMxLUctVmVydGVicmF0ZSBBY3Rpb24gUG90ZW50aWFsIFxbW292ZXJ2aWV3XVxdICB8ICAgCnwgfCBUaCB8IE11c2NsZXMgXFtbaHRtbF1cXSBcW1tkaXNjdXNzaW9uXVxdIHwgICB8ICAgfCAgIAp8V2VlayA5fHx8fHwKfCAxMC8yMiB8IFQgfCBNb3RvciBDb250cm9sIFxbW2h0bWxdXF0gXFtbZGlzY3Vzc2lvbl0oZGlzY3Vzc2lvbnMvRGlzY3Vzc2lvbi1XZWVrOC1tdXNjbGUucGRmKVxdfCBEZXNpZ24gMiBGZWVkaW5nICYgRGlnZXN0aW9uIFxbW2h0bWxdKHByb2plY3RzL2Rlc2lnbjItRkFRLnFtZClcXSBcW1tyZXNvdXJjZXNdKHByb2plY3RzL3Jlc291cmNlcy1kaWdlc3Rpb24ucW1kKVxdIFxbW3R1cm4gaW5dKHByb2plY3RzL2Rlc2lnbjItdHVybmluLnFtZClcXXwgIERlc2lnbiBQcmVzZW50YXRpb25zIHwgICAKfCB8IFRoIHwgQmlvbWVjaGFuaWNzICB8IFBlZXIgQ3JpdGlxdWUgMiB8ICAgIHwgICAKfFdlZWsgMTB8fHx8fAp8IDEwLzI5IHwgVCB8IExvY29tb3Rpb24gb24gTGFuZCBcW1todG1sXVxdIFxbW2Rpc2N1c3Npb25dKGRpc2N1c3Npb25zL0Rpc2N1c3Npb24tV2VlazktYmlvbWVjaGFuaWNzLWxvY29tb3Rpb24ucGRmKVxdIHwgUFM0OiBOZXVyb25zIFxbW3BkZl0oaG9tZXdvcmsvSFc0bmV1cm9ucy5wZGYpXF0gfCAgTGFiODogUEMyLUctSHVtYW4gTXVzY2xlIFxbW292ZXJ2aWV3XVxdIHwgICAKfCAgIHwgVGggfCBMb2NvbW90aW9uIGluIEZsdWlkcyAgfCAgfCAgfCAgIAp8ICAgfCBGIHwgIHwgIFJld3JpdGUgRGVzaWduIDIgRHVlIFxbW0R1ZSBtaWRuaWdodF1cXSB8ICAgfCAgIAp8V2VlayAxMXx8fHx8CnwgMTEvNSB8IFQgfCBCaW9tZWNoYW5pY3MgYW5kIExvY29tb3Rpb24gIFxbW2h0bWxdXF0gfCAgUFM1OiBNdXNjbGVzICYgQmlvbWVjaCBcW1twZGZdKGhvbWV3b3JrL0hXNW11c2NsZXMtYmlvbWVjaGFuaWNzLnBkZilcXSB8IExhYjk6IFBDMy1HLVRvYWQgTXVzY2xlIFxbW292ZXJ2aWV3XVxdIHwgIAp8ICAgfCBUaCB8IEJsb29kIGFuZCBSZXNwaXJhdG9yeSBNZWRpYSB8ICAgfCAgfCAgIAp8V2VlayAxMnx8fHx8CnwgMTEvMTIgIHwgVCB8IEFxdWF0aWMgUmVzcGlyYXRpb24gXFtbaHRtbF1cXSB8ICAgfCBMYWIxMDpQQzEtSS1Ub2FkIE11c2NsZSBJbmRlcGVuZGVudCBcW1tvdmVydmlld11cXSB8ICAgCnwgIHwgVGggfCBBZXJpYWwgUmVzcGlyYXRpb24gIHwgICB8IHwgICAKfFdlZWsgMTN8fHx8fAp8IDExLzE5IHwgVCB8IEZpbmlzaCBSZXNwaXJhdGlvbi9CZWdpbiBPc21vcmVndWxhdGlvbiBcW1todG1sXVxdIHwgUFM2OiBSZXNwaXJhdGlvbiBcW1tkdWUgYXQgc3RhcnQgb2YgY2xhc3NdKGhvbWV3b3JrL0hXNnJlc3BpcmF0aW9uLnBkZilcXSAgfCBMYWIgMTE6IFBDMS1HLUh1bWFuIEVFRyBcW1tvdmVydmlld11cXSB8ICAgCnwgICB8IFRoIHwgU3ltbW9ycGhvc2lzOiBbV2VpYmVsLCBUYXlsb3IsIGFuZCBIb3BwZWxlciAoMTk5MSldKGh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9maWxlL2QvMVRkMURSSnBFMzk4TWo1MG01cjdibTRvb2lpbmtjaGN0L3ZpZXc/dXNwPXNoYXJlX2xpbmspIFRoZSBjb25jZXB0IG9mIHN5bW1vcnBob3NpczogQSB0ZXN0YWJsZSBoeXBvdGhlc2lzIG9mIHN0cnVjdHVyZS1mdW5jdGlvbiByZWxhdGlvbnNoaXAuIFBOQVMgODg6MTAzNTctNjEgfCAgfCAgfCAgIAp8ICAgfCBGIHwgICB8ICBEZXNpZ24gMyBSZXNpcHJhdGlvbiwgUGVlciBDcml0aXF1ZSAzICBcW1todG1sXShwcm9qZWN0cy9kZXNpZ24zLXByb2Nlc3MucW1kKVxdIFxbW3Jlc291cmNlc10ocHJvamVjdHMvZGVzaWduMy1yZXNvdXJjZXMucW1kKVxdIFxbW3R1cm4gaW5dKHByb2plY3RzL2Rlc2lnbjMtdHVybmluLnFtZClcXSB8ICAgfCAgIAp8V2VlayAxNHx8fHx8CnwgMTEvMjYgfCBUIHwgT3Ntb3JlZ3VsYXRpb24gMiBcW1todG1sXVxdIHwgIHwgICB8ICAgCnwgICB8IFRoIHwgX19UaGFua3NnaXZpbmcgSG9saWRheV9fICB8ICB8IE5vIExhYnMgfCAgIAp8V2VlayAxNXx8fHx8CnwgMTIvMyB8IFQgfCBFeGNyZXRpb24gXFtbaHRtbF1cXSB8ICAgfCBMYWIgMTI6IFBDMi1HLUh1bWFuIFJlbmFsIFxbW292ZXJ2aWV3XVxdIHwgICAKfCAgIHwgVGggfCBFeGNyZXRpb24gMiB8IFBTNzogT3Ntb3JlZ3VsYXRpb24gXFtbcGRmXShob21ld29yay9IVzdPc21vcmVndWxhdGlvbi5wZGYpXF0gfCAgfCAgIAp8ICAgfCBGIHwgIHwgRGVzaWduIDMgUmV3cml0ZSB8ICAgfCAgIAp8V2VlayAxNnx8fHx8CnwgMTIvMTAgIHwgVCB8IFN0dWRlbnQgUHJlc2VudGF0aW9ucyB8ICAgfCBUdXJuIGluIExhYiAxMiB8ICAgCnwgIHwgVGggfCBTdHVkZW50IFByZXNlbnRhdGlvbnMgfCBEZXNpZ24gNDogT3Ntb3JlZy9Pd24gKGRyYWZ0IG9wdGlvbmFsKSBcW1todG1sXShwcm9qZWN0cy9kZXNpZ240LnFtZClcXSBcW1tyZXNvdXJjZXNdKHByb2plY3RzL2Rlc2lnbjQtcmVzb3VyY2VzLnFtZClcXSB8ICAgIHwgICAKfHx8fHx8CnwgMTIvMTcgfCBUIHwgRmluYWxzIFdlZWsgfCBEZXNpZ24gNCBEdWUgfCAgIHwgICAKfHx8fHx8Cjo6OgoKCgoKCgAAAAAAAAAAEBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "labs/Lab2-zoo/Lab2.qmd",
			"settings":
			{
				"buffer_size": 7437,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"left_delete",
					null,
					"AQAAAAoEAAAAAAAACgQAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALBAAAAAAAAAsEAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					2,
					"left_delete",
					null,
					"AgAAAEkEAAAAAAAASQQAAAAAAAABAAAAb0gEAAAAAAAASAQAAAAAAAABAAAARA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKBAAAAAAAAEoEAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "What"
					},
					"BAAAAEgEAAAAAAAASQQAAAAAAAAAAAAASQQAAAAAAABKBAAAAAAAAAAAAABKBAAAAAAAAEsEAAAAAAAAAAAAAEsEAAAAAAAATAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIBAAAAAAAAEgEAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " do"
					},
					"AwAAAEwEAAAAAAAATQQAAAAAAAAAAAAATQQAAAAAAABOBAAAAAAAAAAAAABOBAAAAAAAAE8EAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMBAAAAAAAAEwEAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " you"
					},
					"BAAAAE8EAAAAAAAAUAQAAAAAAAAAAAAAUAQAAAAAAABRBAAAAAAAAAAAAABRBAAAAAAAAFIEAAAAAAAAAAAAAFIEAAAAAAAAUwQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPBAAAAAAAAE8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " notice,"
					},
					"CAAAAFMEAAAAAAAAVAQAAAAAAAAAAAAAVAQAAAAAAABVBAAAAAAAAAAAAABVBAAAAAAAAFYEAAAAAAAAAAAAAFYEAAAAAAAAVwQAAAAAAAAAAAAAVwQAAAAAAABYBAAAAAAAAAAAAABYBAAAAAAAAFkEAAAAAAAAAAAAAFkEAAAAAAAAWgQAAAAAAAAAAAAAWgQAAAAAAABbBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTBAAAAAAAAFMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " do"
					},
					"AwAAAFsEAAAAAAAAXAQAAAAAAAAAAAAAXAQAAAAAAABdBAAAAAAAAAAAAABdBAAAAAAAAF4EAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbBAAAAAAAAFsEAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"left_delete",
					null,
					"AQAAALYEAAAAAAAAtgQAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3BAAAAAAAALcEAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAALgEAAAAAAAAuAQAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5BAAAAAAAALkEAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAALgEAAAAAAAAuQQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4BAAAAAAAALgEAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "^"
					},
					"AQAAAHIGAAAAAAAAcwYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByBgAAAAAAAHIGAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "and"
					},
					"AwAAAOMDAAAAAAAA5AMAAAAAAAAAAAAA5AMAAAAAAADlAwAAAAAAAAAAAADlAwAAAAAAAOYDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wMAAAAAAADjAwAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOYDAAAAAAAA5wMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5gMAAAAAAADmAwAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "mental"
					},
					"BgAAAOwDAAAAAAAA7QMAAAAAAAAAAAAA7QMAAAAAAADuAwAAAAAAAAAAAADuAwAAAAAAAO8DAAAAAAAAAAAAAO8DAAAAAAAA8AMAAAAAAAAAAAAA8AMAAAAAAADxAwAAAAAAAAAAAADxAwAAAAAAAPIDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7AMAAAAAAADsAwAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPIDAAAAAAAA8wMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gMAAAAAAADyAwAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " Weʻll"
					},
					"BgAAAB8FAAAAAAAAIAUAAAAAAAAAAAAAIAUAAAAAAAAhBQAAAAAAAAAAAAAhBQAAAAAAACIFAAAAAAAAAAAAACIFAAAAAAAAIwUAAAAAAAAAAAAAIwUAAAAAAAAkBQAAAAAAAAAAAAAkBQAAAAAAACUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwUAAAAAAAAfBQAAAAAAAAAAAAAAIHxA"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " discuss"
					},
					"CAAAACUFAAAAAAAAJgUAAAAAAAAAAAAAJgUAAAAAAAAnBQAAAAAAAAAAAAAnBQAAAAAAACgFAAAAAAAAAAAAACgFAAAAAAAAKQUAAAAAAAAAAAAAKQUAAAAAAAAqBQAAAAAAAAAAAAAqBQAAAAAAACsFAAAAAAAAAAAAACsFAAAAAAAALAUAAAAAAAAAAAAALAUAAAAAAAAtBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQUAAAAAAAAlBQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " this"
					},
					"BQAAAC0FAAAAAAAALgUAAAAAAAAAAAAALgUAAAAAAAAvBQAAAAAAAAAAAAAvBQAAAAAAADAFAAAAAAAAAAAAADAFAAAAAAAAMQUAAAAAAAAAAAAAMQUAAAAAAAAyBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQUAAAAAAAAtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " at"
					},
					"AwAAADIFAAAAAAAAMwUAAAAAAAAAAAAAMwUAAAAAAAA0BQAAAAAAAAAAAAA0BQAAAAAAADUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgUAAAAAAAAyBQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " teh"
					},
					"BAAAADUFAAAAAAAANgUAAAAAAAAAAAAANgUAAAAAAAA3BQAAAAAAAAAAAAA3BQAAAAAAADgFAAAAAAAAAAAAADgFAAAAAAAAOQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQUAAAAAAAA1BQAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADkFAAAAAAAAOgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					3,
					"left_delete",
					null,
					"AwAAADkFAAAAAAAAOQUAAAAAAAABAAAAIDgFAAAAAAAAOAUAAAAAAAABAAAAaDcFAAAAAAAANwUAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAOgUAAAAAAAA6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "he"
					},
					"AgAAADcFAAAAAAAAOAUAAAAAAAAAAAAAOAUAAAAAAAA5BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwUAAAAAAAA3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " end"
					},
					"BAAAADkFAAAAAAAAOgUAAAAAAAAAAAAAOgUAAAAAAAA7BQAAAAAAAAAAAAA7BQAAAAAAADwFAAAAAAAAAAAAADwFAAAAAAAAPQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAD0FAAAAAAAAPgUAAAAAAAAAAAAAPgUAAAAAAAA/BQAAAAAAAAAAAAA/BQAAAAAAAEAFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQUAAAAAAAA9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " class."
					},
					"BwAAAEAFAAAAAAAAQQUAAAAAAAAAAAAAQQUAAAAAAABCBQAAAAAAAAAAAABCBQAAAAAAAEMFAAAAAAAAAAAAAEMFAAAAAAAARAUAAAAAAAAAAAAARAUAAAAAAABFBQAAAAAAAAAAAABFBQAAAAAAAEYFAAAAAAAAAAAAAEYFAAAAAAAARwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAUAAAAAAABABQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEcFAAAAAAAASAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwUAAAAAAABHBQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAAEgFAAAAAAAASAUAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAASQUAAAAAAABJBQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAASAUAAAAAAABIBQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "labs/Lab3-human-peripheral-circulation-dive-response/Lab3.qmd",
			"settings":
			{
				"buffer_size": 30590,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					2,
					"left_delete",
					null,
					"AgAAAMkBAAAAAAAAyQEAAAAAAAABAAAAMcgBAAAAAAAAyAEAAAAAAAABAAAAMA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKAQAAAAAAAMoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "10"
					},
					"AgAAAMgBAAAAAAAAyQEAAAAAAAAAAAAAyQEAAAAAAADKAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIAQAAAAAAAMgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"left_delete",
					null,
					"AQAAAMMBAAAAAAAAwwEAAAAAAAABAAAAMw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEAQAAAAAAAMQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAAMMBAAAAAAAAxAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDAQAAAAAAAMMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAxAEAAAAAAADEAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAxAEAAAAAAADEAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "labs/Lab3-human-peripheral-circulation-dive-response/Lab3ws.qmd",
			"settings":
			{
				"buffer_size": 4728,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					2,
					"left_delete",
					null,
					"AgAAAGkBAAAAAAAAaQEAAAAAAAABAAAAMWgBAAAAAAAAaAEAAAAAAAABAAAAMA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqAQAAAAAAAGoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "10"
					},
					"AgAAAGgBAAAAAAAAaQEAAAAAAAAAAAAAaQEAAAAAAABqAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoAQAAAAAAAGgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoDQAALS0tCnRpdGxlOiAiTGFiIDMgV29ya3NoZWV0OiBQZXJpcGhlcmFsIENpcmN1bGF0aW9uIGFuZCBUaGUgRGl2ZSBSZXNwb25zZSIKYXV0aG9yOgogIC0gbmFtZTogTWFyZ3Vlcml0ZSBCdXRsZXIKICAgIHVybDogaHR0cHM6Ly9idXRsZXJsYWIub3JnCiAgICBhZmZpbGlhdGlvbjogU2Nob29sIG9mIExpZmUgU2NpZW5jZXMsIFVuaXZlcnNpdHkgb2YgSGF3YWlpCiAgICBhZmZpbGlhdGlvbl91cmw6IGh0dHBzOi8vbWFub2EuaGF3YWlpLmVkdS9saWZlc2NpZW5jZXMvCmRlc2NyaXB0aW9uOiAiV29ya3NoZWV0IGZvciBMYWIgMzogUGVyaXBoZXJhbCBDaXJjdWxhdGlvbiBhbmQgVGhlIERpdmUgUmVzcG9uc2UiCmRhdGU6IDIwMjMtMDktMTAKdG9jOiB0cnVlCmZvcm1hdDogCiAgaHRtbDogZGVmYXVsdCAgCiAgZG9jeDogZGVmYXVsdCAgCiAgcGRmOiBkZWZhdWx0ICAKY2F0ZWdvcmllczogW3dlZWsgMywgbGFicywgY2lyY3VsYXRpb24sIHBlcmlwaGVyYWwgY2lyY3VsYXRpb24sIGJsb29kIHByZXNzdXJlLCBkaXZlIHJlc3BvbnNlLCB3b3Jrc2hlZXRdCi0tLQoKOjo6IHsuY2FsbG91dC10aXB9ICAKIyBOb3RlcwotIFBsZWFzZSBwYXkgYXR0ZW50aW9uIHRvIHRoZSBfX2ludGVsbGVjdHVhbCBjb250ZW50X18gY29udGFpbmVkIGluIGVhY2ggc2VjdGlvbiBvZiB0aGlzIF9fd29ya3NoZWV0X18uIAotIE91ciBnb2FsIGhlcmUgaXMgdGhlIHByYWN0aWNlIGxvZ2ljYWxseSBsYXlpbmcgb3V0IG91ciBfX2lkZWFzX18gZm9jdXNpbmcgb24gX19fcGh5c2lvbG9naWNhbCBtZWNoYW5pc21zX19fLiAKLSAgU2VjdGlvbnMgXCgxXCkgYW5kICgyKSB0b2dldGhlciBhcmUgZGVzaWduZWQgdG8gZ3VpZGUgeW91IHRvIGJ1aWxkaW5nIHN0cm9uZyBoeXBvdGhlc2VzLCBhbmQgKDMpIGFuZCAoNCkgYXJlIG1pbmktcmVzdWx0cyBhbmQgbWluaS1kaXNjdXNzaW9uIHNlY3Rpb25zLCByZXNwZWN0aXZlbHkuIAo6OjoKCiMjIF9fKDEpIFN0YXRlbWVudHMgb2YgUHVycG9zZV9fCgpfX1VzZSB0aGVzZSBzdGF0ZW1lbnRzIG9mIHB1cnBvc2UgdG8gZnJhbWUgeW91ciB0aGlua2luZyBhYm91dCB0aGlzIGxhYiwgY29tcGxldGUgdGhlbSBhcyBuZWVkZWQ6X18KCl9EaXN0YW5jZSBmcm9tIGhlYXJ0XyAtLSAiV2UgZGVtb25zdHJhdGUgdGhlIHByZWRpY3RlZCBkcm9wIGluIGJsb29kIHByZXNzdXJlIHdpdGggZGlzdGFuY2UgZnJvbSB0aGUgY2VudHJhbCBwdW1wLiBXZSBleHBsb3JlIHdoZXRoZXIgdGhlcmUgaXMgYSBncmVhdGVyIGRyb3AgaW4gc3lzdG9saWMgb3IgZGlhc3RvbGljIHByZXNzdXJlIHdpdGggZGlzdGFuY2UiIChpbiBhIGZ1bGwgbGFiIHJlcG9ydCB5b3Ugd291bGQgc2V0IHVwIHlvdXIgaWRlYXMgZm9yIHdoeSBpdCBtaWdodCBnbyBlaXRoZXIgd2F5KS4gCgpfRWZmZWN0IG9mIGdyYXZpdHlfIC0tICJXZSBkZW1vbnN0cmF0ZSB0aGUgYWN0aW9uIG9mIGdyYXZpdHkgb24gYmxvb2QgcHJlc3N1cmUuIEFzIHZlcnRlYnJhdGVzIHBvc3Nlc3MgYSBjbG9zZWQgY2lyY3VsYXRvcnkgc3lzdGVtLCB2ZXJ0aWNhbCBoZWlnaHQgc2hvdWxkIGNvbnRyaWJ1dGUgdG8gYmxvb2QgcHJlc3N1cmUgaW4gcHJlZGljdGFibGUgd2F5cy4iCgpfRGl2ZSByZXNwb25zZV8gLS0gIldoZW4gZGl2aW5nLCBwZXJpcGhlcmFsIGNpcmN1bGF0aW9uIHNob3VsZCBiZSByZW9yZ2FuaXplZCB0byByZWR1Y2UgY2FyZGlhYyBvdXRwdXQgYW5kIGluY3JlYXNlIHBlcmlwaGVyYWwgdmFzb2NvbnN0cmljdGlvbiwgY2FsbGVkIHRoZSBkaXZlIHJlc3BvbnNlLiBXZSBhaW0gdG8gb2JzZXJ2ZSB0aGUgZGl2ZSByZXNwb25zZSBieSBtZWFzdXJpbmcgX19fX19fX19fX19fX19fX19fX19fX19fLiIKCl9TdGltdWx1cyBmb3IgZGl2ZSByZXNwb25zZV8gLS0gIldlIHdpbGwgdGVzdCBwb3RlbnRpYWwgdHJpZ2dlcnMgZm9yIHRoZSBkaXZlIHJlc3BvbnNlIGluY2x1ZGluZyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fLiIiICAKCiMjIF9fKDIpIEV4cGVjdGF0aW9ucyBkZW1vbnN0cmF0ZSB5b3VyIG1hc3Rlcnkgb2YgdGhlIG1lY2hhbmlzbXNfXwoKOjo6IHsuY2FsbG91dC10aXB9ICAKIyBOb3RlcwpfQWZ0ZXIgaWRlbnRpZnlpbmcgdGhlIG1lY2hhbmlzbXMsIGNvbW11bmljYXRlIChhdCBsZWFzdCBoaW50IGF0KSB3aGF0IHlvdSBleHBlY3QgdG8gc2VlIGluIHRoZSBkYXRhIGlmIHRoZSBoeXBvdGhlc2l6ZWQgbWVjaGFuaXNtcyBhcmUgb2NjdXJyaW5nLiBUaGF0IHNob3dzIGRlZXBlciB1bmRlcnN0YW5kaW5nLl8gIAo6OjoKCklmIHRoZXNlIG1lY2hhbmlzbXMgYXJlIG9jY3VycmluZyBpbiB5b3VyIGRhdGEsIHdoYXQgd291bGQgeW91IGV4cGVjdCB0byBzZWU/IEJlIHNwZWNpZmljIGFuZCByZWxhdGUgYmFjayB0byBvYnNlcnZhYmxlIHBhcmFtZXRlcnM6IChleHBsYWluIGhvdyB5b3UgY29udHJvbGxlZCBmb3IgY29uZm91bmRpbmcgcGFyYW1ldGVycywgaWYgYXBwcm9wcmlhdGUpLiBfSW4gYSBmdWxsIGxhYiByZXBvcnQgdGhpcyB3b3VsZCBiZSB3cml0dGVuIGluIHBhcmFncmFwaCBmb3JtLCBpbiBhIG5hcnJhdGl2ZSBzdHlsZS5fIAoKLSAgRGlzdGFuY2UgZnJvbSBoZWFydAoKLSAgRWZmZWN0IG9mIGdyYXZpdHkgCgotICBEaXZlIHJlc3BvbnNlCgotICBTdGltdWx1cyBmb3IgZGl2ZSByZXNwb25zZQoKCiMjICgzKSBNaW5pIFJlc3VsdHMKCl9EaXNwbGF5IHlvdXIgcmVzdWx0cyBieSBpbmNsdWRpbmcgZWl0aGVyIF9fYSBmaWd1cmUgb3IgYSB0YWJsZV9fIGZvciBlYWNoIGltcG9ydGFudCByZXN1bHRfICh5b3UgbWF5IHdvcmsgdG9nZXRoZXIgd2l0aCB5b3VyIGdyb3VwIHRvIHByb2R1Y2UgdGhlIGZpZ3VyZXMgb3IgdGFibGVzKS4gX19fV3JpdGUgb25lIHNlbnRlbmNlX18gcG9pbnRpbmcgb3V0IHdoYXQgeW91ciBkYXRhIGFjdHVhbGx5IHNob3dzIGZvciBlYWNoIGRpc3BsYXkgaXRlbS5fIAoKIyMgKDQpIE1pbmkgRGlzY3Vzc2lvbjogCgpfX1dyYXAtdXA6X18gSW4gcGFyYWdyYXBoIGZvcm0sIGJyaWVmbHkgX19EaXNjdXNzX18gdGhlIF9fbWFpbiB0YWtlLWF3YXlzX18gdGhhdCB5b3UgbGVhcm5lZCBmcm9tIHRoZXNlIGV4cGVyaW1lbnRzIG9uIHBlcmlwaGVyYWwgY2lyY3VsYXRpb24gYW5kIHRoZSBkaXZlIHJlc3BvbnNlLiBVc2Ugc3BlY2lmaWMgcmVzdWx0cyB0aGF0IGJhY2sgdXAgeW91ciBzdGF0ZW1lbnRzIG9yIHNwZWN1bGF0ZSBvbiB0aGUgc2lnbmlmaWNhbmNlIG9mIHRoZSByZXN1bHRzLiBPcmdhbml6ZSBieSBoeXBvdGhlc2VzIGFib3ZlLgoKX19JbmRpdmlkdWFsIGFzc2lnbm1lbnQuX18gVGV4dCBtdXN0IGJlIHlvdXIgb3duLCBidXQgeW91IG1heSB3b3JrIHRvZ2V0aGVyIHdpdGggeW91ciBncm91cCB0byBwcm9kdWNlIGZpZ3VyZXMvdGFibGVzLiBZb3UgbWF5IGVkaXQgdGhpcyBzaGVldC4gU3VibWl0IGJ5IGhhcmQgY29weSBuZXh0IHdlZWsuAAAAAAAAAAB4EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgEAAAAAAABmAQAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/R/R.sublime-build",
					""
				],
				[
					"Packages/SendCode/support/R - Source File.sublime-build",
					""
				]
			],
			[
				"Packages/SendCode/support/R - Source File.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"quarto",
				"Set Syntax: Quarto"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"term",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Install Package Control"
			],
			[
				"termin",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"ter",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"termi",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"terminus",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"markdown",
				"GitHub Flavored Markdown: Preview"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"MarkdownPreview",
				"MarkdownLivePreview: Open Settings"
			],
			[
				"Markdown",
				"Preferences: MarkdownEditing Settings"
			],
			[
				"MarkdownLi",
				"MarkdownLivePreview: Open Preview"
			],
			[
				"previw",
				"MarkdownLivePreview: Open Preview"
			],
			[
				"sendcode",
				"SendCode: Choose Program"
			],
			[
				"preview",
				"MarkdownLivePreview: Open Preview"
			],
			[
				"markdownliv",
				"MarkdownLivePreview: Open Preview"
			],
			[
				"",
				"Set Syntax: R"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"set",
				"Set Syntax: R"
			],
			[
				"set syntax: R",
				"Set Syntax: R"
			],
			[
				"terminus: ope",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"set syntax: r",
				"Set Syntax: R Console"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 160.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/marguerite/Documents/git/animalphys-2024",
		"/Users/marguerite/Documents/git/animalphys-2024/labs",
		"/Users/marguerite/Documents/git/animalphys-2024/labs/Lab3-human-peripheral-circulation-dive-response",
		"/Users/marguerite/Documents/git/animalphys-2024/posts"
	],
	"file_history":
	[
		"/Users/marguerite/Documents/git/animalphys-2024/_quarto.yml",
		"/Users/marguerite/Documents/git/animalphys-2024/images/AerobicRespiration.png",
		"/Users/marguerite/Documents/git/animalphys-2024/posts/2024-08-27-megalodon-model/slides.qmd",
		"/Users/marguerite/Documents/git/animalphys-2024/labs/Lab8-human-emg/Lab8.qmd",
		"/Users/marguerite/Documents/git/animalphys-2024/syllabus.qmd",
		"/Users/marguerite/Documents/git/animalphys-2024/posts/2024-08-27-megalodon-model/index.qmd",
		"/Users/marguerite/Documents/git/animalphys-2024/index.qmd",
		"/Users/marguerite/Documents/git/animalphys-2024/_posts-hidden/Lab3-human-peripheral-circulation-dive-response/Lab3 3.html",
		"/Users/marguerite/Library/Mobile Documents/com~apple~CloudDocs/Documents/git/animalphys-2024/labs/Lab4-human-ecg/Lab4.qmd",
		"/Users/marguerite/Library/Mobile Documents/com~apple~CloudDocs/Documents/git/Oreophryne_manuscript/Products/oreophryne.bib",
		"/Users/marguerite/Library/Mobile Documents/com~apple~CloudDocs/Documents/git/Oreophryne_manuscript/Products/oreo.qmd",
		"/Users/marguerite/Library/Mobile Documents/com~apple~CloudDocs/Documents/git/Oreophryne_manuscript/Code/plotting_functions.R",
		"/Users/marguerite/Library/Mobile Documents/com~apple~CloudDocs/Documents/git/Oreophryne_manuscript/Code/oreoplots.R",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Code/tables.R",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Code/processing_code.R",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Code/plotting_functions.R",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Code/genetree_speciestree_stats_all.R",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Products/oreophryne.bib",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Code/oreocode.R",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Code/print_def_cut_text.R",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Code/clean_metadata.R",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/genetree_speciestree_5loci/iqtreerun_genetreespeciestree_all198_5partitions.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Products/oreo.qmd",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Code/treeplotting_gradient.R",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Code/edit.nexus.R",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Code/ic_oaref.csv",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Code/ils_oacp.csv",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Code/trimmed_iqtree_2024_metadata.csv",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Code/Rplot_colors.pdf",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Code/temp.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/genetree_speciestree_5loci/all198_5loci.iqtree",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/genetree_speciestree_5loci/iqtreerun_genetreespeciestree_all198_15partitions.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/twotaxa_tests/iqtreerun_bestmodel.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/mesquite_20240508_oreophryne_aphantophryne_cophix_paedo_trimmed.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/mesquite_20240508_oreophryne_aphantophryne_outgroup_trimmed.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/mesquite_20240508_oreophryne_aphantophryne_references_allspecies_trimmed.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/mesquite_20240508_oreophryne_aphantophryne_references_trimmed.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/mesquite_20240508_oreophryne_outgroup_trimmed.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/alignment_20240508_allspecies_198tips.fasta",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/input/asterophryinae_5partitions.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/mesquite_20240508_oreophryne_aphantophryne_cophix_paedo_outgroup_trimmed.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/alignment_20240508_oreophryne_outgroup_trimmed.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/alignment_20240508_oreophryne_aphantophryne_references_trimmed.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/alignment_20240508_oreophryne_aphantophryne_cophix_paedo_trimmed.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/alignment_20240508_oreophryne_aphantophryne_cophix_paedo_outgroup_trimmed.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/alignment_20240508_oreophryne_aphantophryne_outgroup_trimmed.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/alignment_20240508_oreophryne_aphantophryne_references_allspecies_trimmed.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/alignment_20240508_allspecies_207tips.fasta",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/alignment_20240508_allspecies_207tips.fasta.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/genetree_speciestree/iqtreerun_genetreespeciestree_oaref.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/oreophryne_auparoparo_aphantophryne_outgroup_trimmed/iqtreerun_bestmodel.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/oreophryne_aphantophryne_references_trimmed_allspecies/iqtreerun_bestmodel.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/oreophryne_aphantophryne_references_trimmed/oreo_aupa_apha_references_trimmed.log",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/oreophryne_aphantophryne_references_trimmed_allspecies/oreophryne_aphantophryne_references_trimmed.log",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/oreophryne_aphantophryne_references_trimmed/iqtreerun_bestmodel.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/oreophryne_aphantophryne_cophix_paedo_outgroup_trimmed/iqtreerun_bestmodel.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Products/Oreophryne Manuscript Draft.qmd",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/Astral/Astral_speciestree.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/onetaxa_tests_threeoutgroups/iqtreerun_bestmodel.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/twotaxa_tests_A_sp4/iqtreerun_bestmodel.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/twotaxa_twocoph_tests/iqtreerun_bestmodel.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/twotaxa_tests/iqtreerun_bestmodel_oreo.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Products/Oreophryne Manuscript Draft_old.qmd",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/genetree_speciestree/iqtreerun_genetreespeciestree_oacp.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/genetree_speciestree/iqtreerun_genetreespeciestree_oa.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/genetree_speciestree/iqtreerun_genetreespeciestree_all207.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/genetree_speciestree/iqtreerun_genetreespeciestree.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/input/asterophryinae_dates.txt",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/onetaxa_tests/iqtreerun_bestmodel.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/onetaxa_tests_threeoutgroups/iqtreerun_bestmodel_oreo.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/onetaxa_tests/iqtreerun_bestmodel_oreo.sh",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/Data/IQTree/mesquite_alignment/onetaxa/aupa1.nex",
		"/Users/marguerite/Documents/git/Oreophryne_manuscript/.gitignore",
		"/Users/marguerite/Documents/Macroevolution/Exam_1.md",
		"/Users/marguerite/Documents/git/macroevolution-class/README.md",
		"/Users/marguerite/Documents/git/macroevolution-class/exams/exam1/Exam1notes.md",
		"/Users/marguerite/Documents/git/macroevolution-class/discussions/2024-02-29-modularity/README.md",
		"/Users/marguerite/Documents/git/macroevolution-class/discussions/2024-02-15-20-species-concepts/README.md",
		"/Users/marguerite/Documents/git/macroevolution-class/discussions/2024-02-15-species-concepts/README.md",
		"/Users/marguerite/Documents/git/macroevolution-class/discussions/2024-02-06-cladistic-taxonomy/README.md",
		"/Users/marguerite/Documents/git/animalphys-site/projects/design4.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/posts/2023-10-16-muscles2/muscles2.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/labs/Lab12-human-renal/Lab12.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/posts/2023-11-20-osmoregulation2/osmoregulation2.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/projects/design3a.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/posts/2023-11-06-ventilation/ventilation.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/slides.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/posts/2023-10-09-muscles/muscles.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/schedule.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/labs/Lab8-human-emg/Lab8.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/resources.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/_quarto.yml",
		"/Users/marguerite/Documents/git/animalphys-site/labs/Lab11-human-eeg/Lab11.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/posts/2023-11-27-excretion/excretion.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/docs/projects/design4.pdf",
		"/Users/marguerite/Documents/git/animalphys-site/projects/design3-resources.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/projects/design4-resources.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/projects/design1-FAQ.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/posts/2023-11-13-osmoregulation/osmoregulation.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/projects/design3.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/projects/design3-turnin.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/slides 2.html",
		"/Users/marguerite/Documents/git/animalphys-site/labs/Lab11-human-eeg/Lab11-AF-2.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/labs/Lab11-human-eeg/Lab8.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/posts/2023-09-25-digestion/digestion.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/projects/design3-process.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/posts/2023-10-30-blood-respiration/blood-respiration.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/labs/Lab9-10-toad-muscle/Lab9-10.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/posts/2023-09-18-feeding/feeding.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/projects/design1.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/posts/2023-08-28-Metabolism/index.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/labs/Lab7-toad-nerve/Lab7.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/posts/2023-10-23-biomechanics-locomotion/biomechanics-locomotion.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/projects/design2-turnin.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/labs/Lab6-lobster-heart/Lab6.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/labs/_column_examples.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/index.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/labs/Lab3-human-peripheral-circulation-dive-response/Lab3.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/syllabus.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/projects/design1-turnin.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/posts/2023-10-02-neurons/neurons.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/labs/Lab2-zoo/index.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/labs-misc/lab-notebook.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/labs/Lab4-human-ecg/Lab4.qmd",
		"/Users/marguerite/Documents/git/rclass-site/_quarto.yml",
		"/Users/marguerite/Documents/git/rclass-site/lectures.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/labs/Lab1-heart-rate-and-data-analysis/index.qmd",
		"/Users/marguerite/Documents/git/animalphys-site/projects/design2.qmd"
	],
	"find":
	{
		"height": 30.0
	},
	"find_in_files":
	{
		"height": 116.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "schedule.qmd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6160,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Quarto/Quarto.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "labs/Lab2-zoo/Lab2.qmd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7437,
						"regions":
						{
						},
						"selection":
						[
							[
								1352,
								1352
							]
						],
						"settings":
						{
							"syntax": "Packages/Quarto/Quarto.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "labs/Lab3-human-peripheral-circulation-dive-response/Lab3.qmd",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30590,
						"regions":
						{
						},
						"selection":
						[
							[
								16820,
								16820
							]
						],
						"settings":
						{
							"syntax": "Packages/Quarto/Quarto.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5371.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "labs/Lab3-human-peripheral-circulation-dive-response/Lab3ws.qmd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4728,
						"regions":
						{
						},
						"selection":
						[
							[
								358,
								358
							]
						],
						"settings":
						{
							"syntax": "Packages/Quarto/Quarto.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 44.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Terminus":
	{
		"height": 66.0
	},
	"output.Terminus 2":
	{
		"height": 280.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.markdown":
	{
		"height": 126.0
	},
	"output.unsaved_changes":
	{
		"height": 36.0
	},
	"pinned_build_system": "",
	"project": "animalphys2024.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Documents/git/rclass-site/syllabus.sublime-workspace"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 244.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
